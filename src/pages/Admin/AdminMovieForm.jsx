import React, { useState, useEffect } from 'react';
import { Form, Input, DatePicker, Switch, Button, Upload, message , Divider, Avatar, Space, Modal} from 'antd';
import { PlusOutlined, UserOutlined, MinusCircleOutlined } from '@ant-design/icons';
import axios from '../../config/axios';
import styles from './AdminMovieForm.module.scss';
import moment from 'moment';

const AdminMovieForm = () => {
  const [form] = Form.useForm();
  const [posterFile, setPosterFile] = useState(null);
  const [backgroundFile, setBackgroundFile] = useState([]);// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
  const [posterFileList, setPosterFileList] = useState([]);
  const [backgroundFileList, setBackgroundFileList] = useState([]);

  const [movieList, setmovieList] = useState([])
  const [searchText, setSearchText] = useState("");

  const filteredMovies = movieList.filter(movie =>
    movie.title.toLowerCase().includes(searchText.toLowerCase())
  );

  const fetchmovieList = async () => {
    const httpResponse = await axios.get("/movie")
    console.log("üîç Response ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", httpResponse);  // ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log("üìå Data ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API:", httpResponse.data);  // ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞ data
    setmovieList(httpResponse.data);
  };

  useEffect(() => {
      fetchmovieList();
    },[]);
  
  const handlePosterChange = ({ fileList }) => {
    setPosterFileList(fileList);
    if (fileList.length > 0) {
      setPosterFile(fileList[0].originFileObj);
    } else {
      setPosterFile(null);
    }
  };
    
  const handleBackgroundChange = ({ fileList }) => {
    setBackgroundFileList(fileList);
    if (fileList.length > 0) {
      setBackgroundFile(fileList.map(file => file.originFileObj)); // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
    } else {
      setBackgroundFile(null);
    }
  };
  
  const handleSubmit = async (values) => {
    const token = localStorage.getItem('ACCESS_TOKEN');
    if (!token) {
      message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    const formData = new FormData();
    Object.keys(values).forEach((key) => {
      formData.append(key, values[key]);
    });

    if (posterFile) formData.append('posterimagePath', posterFile);
    if (backgroundFile) backgroundFile.forEach((file) => {
      formData.append(`backgroundimagePath`, file); // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array
    });
    
    try {
      await axios.post('/movie/add', formData, {
        headers: { 
          'Content-Type': 'multipart/form-data',
        },
      });
      message.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      form.resetFields();
      setPosterFile(null);
      setBackgroundFile(null);
      setPosterFileList([]);
      setBackgroundFileList([]);
      fetchmovieList();
    } catch (error) {
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ error.response ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
      if (error.response) {
        console.error("Error response:", error.response);
        message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (error.response.data?.message || error.message));
      } else {
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ response ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        console.error("Error message:", error.message);
        message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
      }
    }
  };

  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedMovie, setSelectedMovie] = useState(null);
  const [formEdit] = Form.useForm();

  const handleEdit = (id) => {
    const movie = movieList.find(movie => movie.id === id);
    if (!movie) {
      message.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
      return;
    }

    setSelectedMovie(movie);
    setIsEditModalOpen(true);

    const langs = Array.isArray(movie.lang) ? movie.lang : JSON.parse(movie.lang || "[]");

    formEdit.setFieldsValue({
      title: movie.title,
      engTitle: movie.engTitle,
      date: movie.date ? moment(movie.date) : null,
      description: movie.description,
      Atcinema: movie.Atcinema,
      age: movie.age,
      lang: langs,
      trailerUrl:movie.trailerUrl
    })

    if (movie.posterimagePath) {
      setPosterFileList([
        {
          uid: '-1', // ‡πÉ‡∏ä‡πâ UID ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ React ‡∏•‡∏ö
          name: 'poster_image.jpg',
          status: 'done',
          url: `http://localhost:8000/${movie.posterimagePath}`, // URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤
        }
      ])
    } else {
      setPosterFileList([])
    }

    if (movie.backgroundimagePath) {
      let backgroundPaths = Array.isArray(movie.backgroundimagePath) 
        ? movie.backgroundimagePath 
        : JSON.parse(movie.backgroundimagePath || "[]");

        setBackgroundFileList(
          backgroundPaths.map((path, index) => ({
            uid: `-${index}`, // ‡πÉ‡∏ä‡πâ UID ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
            name: `background_image_${index + 1}.jpg`,
            status: 'done',
            url: `http://localhost:8000/${path}` // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }))
  );
} else {
  setBackgroundFileList([]);
}

  }
  const handleUpdate = async (values) => {
    if (!selectedMovie) {
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
      return;
    }

    const formData = new FormData();
    Object.keys(values).forEach((key) => {
      if (key === "date") {
        formData.append(key, values[key] ? values[key].format("YYYY-MM-DD") : "");
      } else {
        formData.append(key, values[key]);
      }
    });

    if (posterFile) {
      formData.append("posterimagePath", posterFile);
    }

    if (backgroundFile) backgroundFile.forEach((file) => {
      formData.append(`backgroundimagePath`, file); // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array
    });

    try {
      await axios.put(`http://localhost:8000/movie/${selectedMovie.id}`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      fetchmovieList(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      setIsEditModalOpen(false);
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", error);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
    }
  }

  const uploadButton = (
    <button style={{ border: 0, background: 'none',color:"black" }} type="button">
      <PlusOutlined />
      <div style={{ marginTop: 8, color:"black" ,fontSize:"12px"}}>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</div>
    </button>
  );

  const handleDelete = async (id) => {
    Modal.confirm({
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
      content: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ?',
      okText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
      cancelText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      onOk: async () => {
        try {
          await axios.delete(`/movie/${id}`);
          message.success("‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
          // setactorList(actorList.filter(actor => actor.id !== id));
          fetchmovieList();
        } catch (error) {
          message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
        }
      }
    })
  } 

  return (
    <div>
      <Modal 
        title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå"
        open={isEditModalOpen}
        onCancel={() => setIsEditModalOpen(false)}
        onOk={() => formEdit.submit()}
      >
        <Form 
          form={formEdit}
          onFinish={handleUpdate}
          layout="vertical"
        >
         <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå(‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)" name="title" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå' }]}>
          <Input placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" />
        </Form.Item>

        <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)" name="engTitle" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå' }]}>
          <Input placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" />
        </Form.Item>

        <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏≤‡∏¢" name="date" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏≤‡∏¢' }]}>
          <DatePicker
            style={{ width: '100%' }}
            format="YYYY-MM-DD" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î format ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
          />
        </Form.Item>

        <Form.Item label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" name="description" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' }]}>
          <Input.TextArea rows={4} placeholder="‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" />
        </Form.Item>

        <Form.Item label="‡∏â‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" name="Atcinema" valuePropName="checked">
          <Switch />
        </Form.Item>

        <Form.Item label="‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå(youtube)" name="trailerUrl" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå' }]}>
        <Input placeholder="‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå" />
        </Form.Item>

        <Form.Item label="‡πÄ‡∏£‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏‡∏ú‡∏π‡πâ‡∏ä‡∏°" name="age" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏£‡∏Ñ‡∏≠‡∏≤‡∏¢‡∏∏' }]}>
          <Input placeholder="‡πÉ‡∏™‡πà‡πÄ‡∏£‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏‡∏ú‡∏π‡πâ‡∏ä‡∏°" />
        </Form.Item>

        <Form.Item label="‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏≤‡∏Å‡∏¢‡πå">
        <Form.List name="lang">
          {(fields, { add, remove }) => (
            <>
              {fields.map(({ key, name, ...restField }) => (
                <Space key={key} style={{ display: "flex", marginBottom: 8 }} align="baseline">
                  <Form.Item
                    {...restField}
                    name={name}
                    rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏≤‡∏Å‡∏¢‡πå" }]}
                  >
                    <Input placeholder="‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏Å‡∏¢‡πå" />
                  </Form.Item>
                  <MinusCircleOutlined onClick={() => remove(name)} style={{ color: "red" }} />
                </Space>
              ))}
              <Button type="dashed" onClick={() => add()} block icon={<PlusOutlined />}>
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤
              </Button>
            </>
          )}
        </Form.List>
      </Form.Item>

      <Form.Item label="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå" name="posterimagePath">
          <Upload 
            listType="picture-card" 
            fileList={posterFileList}
            onChange={handlePosterChange}
            maxCount={1}
            beforeUpload={() => false}
            showUploadList={{ showPreviewIcon: true }}>
            {posterFileList.length >= 1 ? null : uploadButton}
            {/* <Button icon={<UploadOutlined />}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå</Button> */}
          </Upload>
        </Form.Item>

        <Form.Item label="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏£‡∏π‡∏õ)" name="backgroundimagePath">
          <Upload 
          listType="picture-card"
          fileList={backgroundFileList}
          onChange={handleBackgroundChange}
          maxCount={3}
          beforeUpload={() => false}
          showUploadList={{ showPreviewIcon: true }}>
          {backgroundFileList.length >= 3 ? null : uploadButton}
            {/* <Button icon={<UploadOutlined />}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á</Button> */}
          </Upload>
        </Form.Item>
        </Form>
      </Modal>

      <Form form={form} layout="vertical" onFinish={handleSubmit}>
        <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" name="title" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå' }]}>
          <Input placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" />
        </Form.Item>

        <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)" name="engTitle" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå' }]}>
          <Input placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" />
        </Form.Item>

        <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏≤‡∏¢" name="date" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏≤‡∏¢' }]}>
          <DatePicker
            style={{ width: '100%' }}
            format="YYYY-MM-DD" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î format ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
          />
        </Form.Item>

        <Form.Item label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" name="description" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' }]}>
          <Input.TextArea rows={4} placeholder="‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" />
        </Form.Item>

        <Form.Item label="‡∏â‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" name="Atcinema" valuePropName="checked">
          <Switch />
        </Form.Item>
        
        <Form.Item label="‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå(youtube)" name="trailerUrl" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå' }]}>
        <Input placeholder="‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå" />
        </Form.Item>

        <Form.Item label="‡πÄ‡∏£‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏‡∏ú‡∏π‡πâ‡∏ä‡∏°" name="age" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏£‡∏Ñ‡∏≠‡∏≤‡∏¢‡∏∏' }]}>
          <Input placeholder="‡πÉ‡∏™‡πà‡πÄ‡∏£‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏‡∏ú‡∏π‡πâ‡∏ä‡∏°" />
        </Form.Item>

        <Form.Item label="‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏≤‡∏Å‡∏¢‡πå">
        <Form.List name="lang">
          {(fields, { add, remove }) => (
            <>
              {fields.map(({ key, name, ...restField }) => (
                <Space key={key} style={{ display: "flex", marginBottom: 8 }} align="baseline">
                  <Form.Item
                    {...restField}
                    name={name}
                    rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏≤‡∏Å‡∏¢‡πå" }]}
                  >
                    <Input placeholder="‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏Å‡∏¢‡πå" />
                  </Form.Item>
                  <MinusCircleOutlined onClick={() => remove(name)} style={{ color: "red" }} />
                </Space>
              ))}
              <Button type="dashed" onClick={() => add()} block icon={<PlusOutlined />}>
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤
              </Button>
            </>
          )}
        </Form.List>
      </Form.Item>

        <Form.Item label="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå" name="posterimagePath" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' }]}>
          <Upload 
            listType="picture-card" 
            fileList={posterFileList}
            onChange={handlePosterChange}
            maxCount={1}
            beforeUpload={() => false}
            showUploadList={{ showPreviewIcon: true }}>
            {posterFileList.length >= 1 ? null : uploadButton}
            {/* <Button icon={<UploadOutlined />}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå</Button> */}
          </Upload>
        </Form.Item>

        <Form.Item label="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏£‡∏π‡∏õ)" name="backgroundimagePath" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' }]}>
          <Upload 
          listType="picture-card"
          fileList={backgroundFileList}
          onChange={handleBackgroundChange}
          maxCount={3}
          beforeUpload={() => false}
          showUploadList={{ showPreviewIcon: true }}>
          {backgroundFileList.length >= 3 ? null : uploadButton}
            {/* <Button icon={<UploadOutlined />}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á</Button> */}
          </Upload>
        </Form.Item>

        <Form.Item>
          <Button type="primary" htmlType="submit" block>
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå
          </Button>
        </Form.Item>
      </Form>

      <Divider orientation="left" style={{ borderColor: '#00000090' }}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå</Divider>
      <Input.Search 
        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡πå..." 
        allowClear 
        onChange={(e) => setSearchText(e.target.value)}
        style={{ marginBottom: 16, width: "70%" }}
      />
      <div className={styles.actorContainer}>
        {filteredMovies.map((list) => {
          const imageUrl = `http://localhost:8000/${list.posterimagePath}`
          return (
          <div key={list.id} className={styles.actorProfile}>
            <div className={styles.avatarWrapper}>
              <Avatar size={100} icon={<UserOutlined />} src={imageUrl} className={styles.actorPicture}/>
              <div className={styles.buttonOverlay}>
                <button className={styles.editButton} onClick={() => handleEdit(list.id)}>‚úèÔ∏è</button>
                <button className={styles.deleteButton} onClick={() => handleDelete(list.id)}>üóëÔ∏è</button>
              </div>
            </div>
          <p>{list.title}</p>
          </div>
          )
        })}
      </div>
    </div>
  );
};

export default AdminMovieForm;