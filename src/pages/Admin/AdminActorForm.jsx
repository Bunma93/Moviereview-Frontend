import React, { useEffect, useState } from 'react';
import { Form, Input, DatePicker, Select, Button, Upload, message, Divider, Avatar } from 'antd';
import { PlusOutlined, UserOutlined } from '@ant-design/icons';
import axios from '../../config/axios';
import styles from './AdminActorForm.module.scss';

const AdminActorForm = () => {
  const [actorList, setactorList] = useState([]);

  const fetchactorList = async () => {
    const httpResponse = await axios.get("http://localhost:8000/actor")
    console.log("üîç Response ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", httpResponse);  // ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log("üìå Data ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API:", httpResponse.data);  // ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞ data
    setactorList(httpResponse.data);
  };

  useEffect(() => {
    fetchactorList();
  },[]);

  const [form] = Form.useForm();
  const [actorFile, setactorFile] = useState(null);
  const [actorFileList, setactorFileList] = useState([]);
  
  const handleactorChange = ({ fileList }) => {
    setactorFileList(fileList);
    if (fileList.length > 0) {
      setactorFile(fileList[0].originFileObj);
    } else {
      setactorFile(null);
    }
  };
  
  const handleSubmit = async (values) => {
    const token = localStorage.getItem('ACCESS_TOKEN');
    if (!token) {
      message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    const formData = new FormData();
    Object.keys(values).forEach((key) => {
      formData.append(key, values[key]);
    });

    if (actorFile) formData.append('actorimagePath', actorFile);
   
    try {
      await axios.post('/actor/add', formData, {
        headers: { 
          'Content-Type': 'multipart/form-data',
        },
      });
      message.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      form.resetFields();
      setactorFile(null);
      setactorFileList([]);
    } catch (error) {
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ error.response ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
      if (error.response) {
        console.error("Error response:", error.response);
        message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (error.response.data?.message || error.message));
      } else {
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ response ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        console.error("Error message:", error.message);
        message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
      }
    }
  };
  
  const uploadButton = (
    <button style={{ border: 0, background: 'none',color:"black" }} type="button">
      <PlusOutlined />
      <div style={{ marginTop: 8, color:"black" ,fontSize:"12px"}}>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</div>
    </button>
  );

  return (
    <Form form={form} layout="vertical" onFinish={handleSubmit}>
      <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö" name="actorname" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö' }]}>
        <Input placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö" />
      </Form.Item>

      <Form.Item label="‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö" name="birthdate" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö' }]}>
        <DatePicker
          style={{ width: '100%' }}
          format="YYYY-MM-DD" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î format ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
         />
      </Form.Item>

      <Form.Item label="‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö" name="country" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö' }]}>
        <Input placeholder="‡πÉ‡∏™‡πà‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö" />
      </Form.Item>
      {/* <Form.Item label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" name="description" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' }]}>
        <Input.TextArea rows={4} placeholder="‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" />
      </Form.Item> */}
      <Form.Item label="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á" name="role" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á' }]}>
          <Select>
            <Select.Option value="director">‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö</Select.Option>
            <Select.Option value="actor">‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á</Select.Option>
          </Select>
      </Form.Item>

      <Form.Item label="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á/‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö" name="actorimagePath" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' }]}>
        <Upload 
          listType="picture-circle" 
          fileList={actorFileList}
          onChange={handleactorChange}
          maxCount={1}
          beforeUpload={() => false}
          showUploadList={{ showPreviewIcon: true }}>
          {actorFileList.length >= 1 ? null : uploadButton}
          {/* <Button icon={<UploadOutlined />}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á</Button> */}
        </Upload>
      </Form.Item>

      <Form.Item>
        <Button type="primary" htmlType="submit" block>
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á
        </Button>
      </Form.Item>
      <Divider orientation="left" style={{ borderColor: '#00000090' }}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á</Divider>

      <div className={styles.actorContainer}>
        {actorList.map((list)=> {
          const imageUrl = `http://localhost:8000/${list.actorimagePath}`;
          return (
          <div key={list.id} className={styles.actorProfile}>
            <Avatar size={100} icon={<UserOutlined />} src={imageUrl} className={styles.actorPicture}/>
            {list.actorname}
          </div>
          );
        })}
      </div>
    </Form>
  );
};

export default AdminActorForm;